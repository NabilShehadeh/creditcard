name: Credit Card Fraud Detection CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock black flake8 isort
        
    - name: Code formatting check (Black)
      run: black --check src/ tests/ api/
      
    - name: Import sorting check (isort)
      run: isort --check-only src/ tests/ api/
      
    - name: Linting (flake8)
      run: flake8 src/ tests/ api/ --max-line-length=100 --ignore=E203,W503
      
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        pytest tests/ --cov=src --cov-fail-under=80
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Security check with Safety
      run: safety check --json --output safety-report.json || true
      
    - name: Security check with Bandit
      run: bandit -r src/ api/ -f json -o bandit-report.json || true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # Model Training and Validation
  model-training:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Train models
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from data.processor import DataProcessor
        from models.trainer import ModelTrainer
        
        # Load and preprocess data
        processor = DataProcessor()
        df = processor.load_data()
        df_processed = processor.preprocess_data(df)
        train_df, test_df = processor.split_data(df_processed)
        X_train, y_train = processor.prepare_features_target(train_df)
        X_val, y_val = processor.prepare_features_target(test_df)
        
        # Train models
        trainer = ModelTrainer('models')
        results = trainer.train_all_models(X_train, y_train, X_val, y_val)
        
        # Generate report
        report = trainer.generate_model_report()
        print(report)
        
        # Save results
        import json
        with open('model_results.json', 'w') as f:
            json.dump(results, f, indent=2, default=str)
        "
        
    - name: Validate model performance
      run: |
        python -c "
        import json
        
        with open('model_results.json', 'r') as f:
            results = json.load(f)
        
        # Check that ensemble model meets minimum performance
        ensemble_results = results.get('ensemble', {})
        pr_auc = ensemble_results.get('pr_auc_score', 0)
        
        if pr_auc < 0.7:
            print(f'ERROR: Ensemble PR-AUC {pr_auc} below threshold 0.7')
            exit(1)
        else:
            print(f'SUCCESS: Ensemble PR-AUC {pr_auc} meets threshold')
        "
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-models
        path: |
          models/
          model_results.json

  # Docker Build and Test
  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t fraud-detection-api:latest .
        
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container -p 8000:8000 fraud-detection-api:latest
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test prediction endpoint with sample data
        curl -X POST "http://localhost:8000/predict" \
             -H "Content-Type: application/json" \
             -d '{
               "Time": 12345,
               "Amount": 100.0,
               "V1": 0.5, "V2": -0.2, "V3": 0.1, "V4": -0.3, "V5": 0.2,
               "V6": -0.1, "V7": 0.4, "V8": -0.2, "V9": 0.3, "V10": -0.1,
               "V11": 0.2, "V12": -0.3, "V13": 0.1, "V14": -0.2, "V15": 0.3,
               "V16": -0.1, "V17": 0.2, "V18": -0.3, "V19": 0.1, "V20": -0.2,
               "V21": 0.3, "V22": -0.1, "V23": 0.2, "V24": -0.3, "V25": 0.1,
               "V26": -0.2, "V27": 0.3, "V28": -0.1
             }' || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
    - name: Push to registry (if on main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker tag fraud-detection-api:latest ${{ secrets.DOCKER_USERNAME }}/fraud-detection-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/fraud-detection-api:latest

  # API Testing
  api-test:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx pytest-asyncio
        
    - name: Start API server
      run: |
        python api/main.py &
        sleep 30
        
    - name: Run API tests
      run: |
        python -c "
        import httpx
        import asyncio
        
        async def test_api():
            async with httpx.AsyncClient() as client:
                # Test health endpoint
                response = await client.get('http://localhost:8000/health')
                assert response.status_code == 200
                
                # Test prediction endpoint
                sample_data = {
                    'Time': 12345,
                    'Amount': 100.0,
                    'V1': 0.5, 'V2': -0.2, 'V3': 0.1, 'V4': -0.3, 'V5': 0.2,
                    'V6': -0.1, 'V7': 0.4, 'V8': -0.2, 'V9': 0.3, 'V10': -0.1,
                    'V11': 0.2, 'V12': -0.3, 'V13': 0.1, 'V14': -0.2, 'V15': 0.3,
                    'V16': -0.1, 'V17': 0.2, 'V18': -0.3, 'V19': 0.1, 'V20': -0.2,
                    'V21': 0.3, 'V22': -0.1, 'V23': 0.2, 'V24': -0.3, 'V25': 0.1,
                    'V26': -0.2, 'V27': 0.3, 'V28': -0.1
                }
                
                response = await client.post('http://localhost:8000/predict', json=sample_data)
                assert response.status_code == 200
                
                data = response.json()
                assert 'fraud_probability' in data
                assert 'fraud_prediction' in data
                assert 'risk_level' in data
                assert 'top_features' in data
                
                print('API tests passed!')
        
        asyncio.run(test_api())
        "

  # Documentation
  docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        
    - name: Build documentation
      run: |
        # Create basic documentation structure
        mkdir -p docs/_build
        
        # Generate API documentation
        python -c "
        import sys
        sys.path.append('src')
        from data.processor import DataProcessor
        from models.trainer import ModelTrainer
        
        # Generate usage examples
        with open('docs/usage_examples.md', 'w') as f:
            f.write('# Usage Examples\n\n')
            f.write('## Data Processing\n\n')
            f.write('```python\n')
            f.write('from src.data.processor import DataProcessor\n\n')
            f.write('processor = DataProcessor()\n')
            f.write('df = processor.load_data()\n')
            f.write('df_processed = processor.preprocess_data(df)\n')
            f.write('train_df, test_df = processor.split_data(df_processed)\n')
            f.write('```\n\n')
            
            f.write('## Model Training\n\n')
            f.write('```python\n')
            f.write('from src.models.trainer import ModelTrainer\n\n')
            f.write('trainer = ModelTrainer()\n')
            f.write('results = trainer.train_all_models(X_train, y_train, X_val, y_val)\n')
            f.write('report = trainer.generate_model_report()\n')
            f.write('```\n\n')
        "
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [test, security, docker, api-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.docker.result == 'success' && needs.api-test.result == 'success' }}
      run: |
        echo "✅ All CI/CD checks passed successfully!"
        # Add Slack/email notification here if needed
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.docker.result == 'failure' || needs.api-test.result == 'failure' }}
      run: |
        echo "❌ CI/CD checks failed!"
        # Add Slack/email notification here if needed
